{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthServiceService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.credentials = {\n      userName: '',\n      Password: ''\n    };\n  }\n  storeToken(tokenValue) {\n    localStorage.setItem('token', tokenValue);\n  }\n  getToken() {\n    localStorage.getItem('token');\n  }\n  isLoggedIn() {\n    return !!localStorage.getItem('token');\n  }\n  login(form) {\n    if (form.valid) {\n      this.http.post(\"http://localhost:5075/api/Auth/login\", this.credentials, {\n        headers: new HttpHeaders({\n          \"Content-Type\": \"application/json\"\n        })\n      }).subscribe({\n        next: res => {\n          const token = res;\n          localStorage.setItem('jwt', token.Token);\n          this.invalidLogin = false;\n          this.router.navigate([\"doctor\"]);\n          const tokenstring = localStorage.getItem('jwt');\n          console.log('Token:', tokenstring);\n        },\n        error: err => this.invalidLogin = true\n      });\n    }\n  }\n}\n_class = AuthServiceService;\n_class.ɵfac = function AuthServiceService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["HttpHeaders","AuthServiceService","constructor","http","router","credentials","userName","Password","storeToken","tokenValue","localStorage","setItem","getToken","getItem","isLoggedIn","login","form","valid","post","headers","subscribe","next","res","token","Token","invalidLogin","navigate","tokenstring","console","log","error","err","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\SOTI Training\\CapStoneProject\\Final\\Capstone-Project\\cureWellApp\\src\\app\\shared\\auth-service.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Admin } from '../_interface/admin.model';\nimport { NgForm } from '@angular/forms';\nimport { ResponseToken } from '../_interface/response-token.model';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthServiceService {\n\n  constructor(private http:HttpClient,private router:Router) { }\n\n\n  storeToken(tokenValue:string){\n    localStorage.setItem('token',tokenValue);\n  }\n\n  getToken(){\n    localStorage.getItem('token');\n  }\n\n  isLoggedIn():boolean{\n    return !! localStorage.getItem('token');\n  }\n\n  invalidLogin:boolean\n  credentials:Admin = {userName:'',Password:''}\n\n  login(form:NgForm)  {\n    if(form.valid){\n      this.http.post<ResponseToken>(\"http://localhost:5075/api/Auth/login\",this.credentials,{\n        headers: new HttpHeaders({ \"Content-Type\": \"application/json\"})\n      })\n      .subscribe({\n        next: (res:ResponseToken) => {\n          const token = res;\n          localStorage.setItem('jwt', token.Token); \n          this.invalidLogin=false;\n          this.router.navigate([\"doctor\"]);\n\n          const tokenstring = localStorage.getItem('jwt');\nconsole.log('Token:', tokenstring);\n\n        },\n        error:  (err: HttpErrorResponse) => this.invalidLogin = true\n      })\n      \n    }\n  }\n\n}\n"],"mappings":";AAAA,SAAwCA,WAAW,QAAQ,sBAAsB;;;;AAUjF,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAe,EAASC,MAAa;IAArC,KAAAD,IAAI,GAAJA,IAAI;IAAoB,KAAAC,MAAM,GAANA,MAAM;IAgBlD,KAAAC,WAAW,GAAS;MAACC,QAAQ,EAAC,EAAE;MAACC,QAAQ,EAAC;IAAE,CAAC;EAhBgB;EAG7DC,UAAUA,CAACC,UAAiB;IAC1BC,YAAY,CAACC,OAAO,CAAC,OAAO,EAACF,UAAU,CAAC;EAC1C;EAEAG,QAAQA,CAAA;IACNF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC/B;EAEAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAAEJ,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACzC;EAKAE,KAAKA,CAACC,IAAW;IACf,IAAGA,IAAI,CAACC,KAAK,EAAC;MACZ,IAAI,CAACd,IAAI,CAACe,IAAI,CAAgB,sCAAsC,EAAC,IAAI,CAACb,WAAW,EAAC;QACpFc,OAAO,EAAE,IAAInB,WAAW,CAAC;UAAE,cAAc,EAAE;QAAkB,CAAC;OAC/D,CAAC,CACDoB,SAAS,CAAC;QACTC,IAAI,EAAGC,GAAiB,IAAI;UAC1B,MAAMC,KAAK,GAAGD,GAAG;UACjBZ,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEY,KAAK,CAACC,KAAK,CAAC;UACxC,IAAI,CAACC,YAAY,GAAC,KAAK;UACvB,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;UAEhC,MAAMC,WAAW,GAAGjB,YAAY,CAACG,OAAO,CAAC,KAAK,CAAC;UACzDe,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEF,WAAW,CAAC;QAE1B,CAAC;QACDG,KAAK,EAAIC,GAAsB,IAAK,IAAI,CAACN,YAAY,GAAG;OACzD,CAAC;;EAGN;;SAxCWxB,kBAAkB;;mBAAlBA,MAAkB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAAlBpC,MAAkB;EAAAqC,OAAA,EAAlBrC,MAAkB,CAAAsC,IAAA;EAAAC,UAAA,EAFjB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}